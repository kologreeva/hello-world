{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from scipy.stats import binom\n",
    "\n",
    "y = np.array([7, 7, 1, 3, 2, 1, 5, 1, 4, 0, 2, 3, 3, 1, 2, 2, 3,\n",
    "              1, 4, 0, 8, 3, 5, 3, 0, 0, 7, 1, 1, 3, 1, 3, 2, 4, 1, 6, 2, 2, 4, 1, 3, 1, 1, 2, 7, 3, 3, 2, 2, 2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def e_step(data, M, mu1_cur, mu2_cur, pi1_cur):\n",
    "    pi2_cur = 1 - pi1_cur\n",
    "    r_i1 = binom.pmf(data, M, mu1_cur) * pi1_cur / (binom.pmf(data, M, mu1_cur) * pi1_cur \n",
    "                                                    + binom.pmf(data, M, mu2_cur) * pi2_cur)\n",
    "    r_i2 = binom.pmf(data, M, mu2_cur) * pi2_cur / (binom.pmf(data, M, mu1_cur) * pi1_cur \n",
    "                                                    + binom.pmf(data, M, mu2_cur) * pi2_cur)\n",
    "    return r_i1, r_i2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def m_step(data, M, r1, r2):\n",
    "    pi1_new = sum(r1) / len(data)\n",
    "    pi2_new = 1 - pi1_new\n",
    "    mu1_new = sum(data * r1) / (M * sum(r1))\n",
    "    mu2_new = sum(data * r2) / (M * sum(r2))\n",
    "\n",
    "    return pi1_new, pi2_new, mu1_new, mu2_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def em_2coins(data, M = 10, mu1 = None, mu2 = None, pi1 = None, eps = .0005):\n",
    "    mu1 = mu1 or np.random.random()\n",
    "    mu2 = mu2 or np.random.random()\n",
    "    pi1 = pi1 or np.random.random()\n",
    "    pi2 = 1 - pi1\n",
    "    k = 0\n",
    "    print(\"Starting parameters: pi1 = %0.3f,  pi2 = %0.3f,  mu1 = %0.3f,  mu2 = %0.3f\\n\" % (pi1, pi2, mu1, mu2))\n",
    "    print(\"№itr\\t  pi1     pi2     mu1     mu2\")\n",
    "    while True:\n",
    "        r1, r2 = e_step(data, M, mu1, mu2, pi1)\n",
    "        pi1_new, pi2_new, mu1_new, mu2_new = m_step(data, M, r1, r2)\n",
    "        print(\"#%d:\\t  %0.3f   %0.3f   %0.3f   %0.3f\" % (k, pi1_new, pi2_new, mu1_new, mu2_new))\n",
    "        k = k + 1\n",
    "        if np.sqrt((mu1 - mu1_new)**2 + (mu2 - mu2_new)**2 + 2 * (pi1 - pi1_new)**2) < eps:\n",
    "            break\n",
    "            \n",
    "        mu1, mu2, pi1 = mu1_new, mu2_new, pi1_new\n",
    "    print(\"---------------------------------------\")\n",
    "    print(\"Successfully finished after %d iterations\" % k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting parameters: pi1 = 0.049,  pi2 = 0.951,  mu1 = 0.388,  mu2 = 0.344\n",
      "\n",
      "№itr\t  pi1     pi2     mu1     mu2\n",
      "#0:\t  0.044   0.956   0.355   0.266\n",
      "#1:\t  0.054   0.946   0.469   0.259\n",
      "#2:\t  0.092   0.908   0.620   0.234\n",
      "#3:\t  0.127   0.873   0.662   0.213\n",
      "#4:\t  0.139   0.861   0.658   0.208\n",
      "#5:\t  0.144   0.856   0.651   0.206\n",
      "#6:\t  0.147   0.853   0.647   0.205\n",
      "#7:\t  0.149   0.851   0.644   0.205\n",
      "#8:\t  0.150   0.850   0.642   0.204\n",
      "#9:\t  0.151   0.849   0.641   0.204\n",
      "#10:\t  0.151   0.849   0.640   0.204\n",
      "#11:\t  0.152   0.848   0.640   0.204\n",
      "#12:\t  0.152   0.848   0.640   0.204\n",
      "---------------------------------------\n",
      "Successfully finished after 13 iterations\n"
     ]
    }
   ],
   "source": [
    "em_2coins(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
